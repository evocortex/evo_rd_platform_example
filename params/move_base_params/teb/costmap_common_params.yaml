max_obstacle_height: 0.60  # assume something like an arm is mounted on top of the robot

# Obstacle Cost Shaping (http://wiki.ros.org/costmap_2d/hydro/inflation)
# robot_radius: 0.5  # distance a circular robot should be clear of the obstacle (kobuki: 0.18)
# footprint: [[x0, y0], [x1, y1], ... [xn, yn]]  # if the robot is not circular

# Note: The more edges the polygon has, the more computation time..
footprint: [[0.4, 0.25], [0.4, -0.25], [-0.35, -0.25], [-0.35, 0.25]]
#footprint:   [[0.35, 0.25],
#            [0.35, 0.1],
#            [0.37, 0.04],
#            [0.40, 0.0],
#            [0.37, -0.04],
#            [0.35, -0.1],
#            [0.35, -0.25],
#            [-0.35, -0.25],
#            [-0.35, -0.1],
#            [-0.37, -0.04],
#            [-0.40, -0.0],
#            [-0.37, 0.04],
#            [-0.35, 0.1],
#            [-0.35, 0.25]]

footprint_padding: 0.025

#unknown_threshold:    15 #?
#mark_threshold:       1 #?

obstacle_layer:
  enabled:              true
  max_obstacle_height:  0.6
  origin_z:             0.0
  z_resolution:         0.2
  z_voxels:             2
  unknown_threshold:    15
  mark_threshold:       0
  combination_method:   1
  track_unknown_space:  true    #true needed for disabling global path planning through unknown space
  obstacle_range: 2.5
  raytrace_range: 3.0
  publish_voxel_map: false
  observation_sources: base_scan_front
  #observation_sources: base_scan_front base_scan_back

  base_scan_front: 
    sensor_frame: laser_front
    data_type: LaserScan
    topic: scan_front
    expected_update_rate: 0.2
    observation_persistence: 0.0
    marking: true
    clearing: true
    min_obstacle_height: -0.10
    max_obstacle_height: 2.0
    inf_is_valid: true #obstacles do not get cleared when an inf value is received but deemed invalid

#  base_scan_back: 
#    sensor_frame: laser_back
#    data_type: LaserScan
#    topic: laser_back
#    expected_update_rate: 0.2
#    observation_persistence: 0.0
#    marking: true
#    clearing: true # If /hokuyo/scan publishes ones an obstacle, and in the next frame not, this costs will be cleared.
#    min_obstacle_height: -0.10
#    max_obstacle_height: 2.0


#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
inflation_layer:
  enabled:              true
  cost_scaling_factor:  10.0  # exponential rate at which the obstacle cost drops off (default: 10)
  inflation_radius:     0.5  # max. distance from an obstacle at which costs are incurred for planning paths.

static_layer:
  enabled:              true
  

